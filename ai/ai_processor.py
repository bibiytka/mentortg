import os
import json
import logging
from typing import Optional, Dict, Tuple
from openai import AsyncOpenAI
import config
import aiofiles

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
openai_client = None

def get_openai_client():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å OpenAI –∫–ª–∏–µ–Ω—Ç"""
    global openai_client
    if openai_client is None:
        try:
            openai_client = AsyncOpenAI(api_key=config.OPENAI_API_KEY)
            logger.info("‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            raise
    return openai_client

async def load_prompt_template() -> str:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
    template_path = os.path.join(config.PROMPTS_DIR, "check_answer_prompt.txt")
    
    try:
        async with aiofiles.open(template_path, 'r', encoding='utf-8') as f:
            return await f.read()
    except FileNotFoundError:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        logger.warning(f"–§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ {template_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω")
        return """–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç-–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –º–æ—Ä—Å–∫–æ–≥–æ –¥–µ–ª–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ—Ü–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞.

### –£—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ —Ç–µ–º–µ:
---
{theory_text}
---

### –ó–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:
–í–æ–ø—Ä–æ—Å: "{question_text}"
–û—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞: "{user_answer_text}"

–û—Ü–µ–Ω–∏ –æ—Ç–≤–µ—Ç –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é.

### –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (–¢–û–õ–¨–ö–û JSON):
{{"is_sufficient": boolean, "recommendation": "–∫—Ä–∞—Ç–∫–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞"}}"""

async def build_check_answer_prompt(theory_text: str, question_text: str, user_answer_text: str) -> str:
    """–°–æ–±—Ä–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞"""
    template = await load_prompt_template()
    
    return template.format(
        theory_text=theory_text,
        question_text=question_text,
        user_answer_text=user_answer_text
    )

async def transcribe_voice(voice_file_data: bytes) -> Optional[str]:
    """–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Whisper"""
    try:
        client = get_openai_client()
        if client is None:
            logger.warning("‚ö†Ô∏è OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º."
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        import io
        voice_file = io.BytesIO(voice_file_data)
        voice_file.name = "voice.ogg"  # OpenAI —Ç—Ä–µ–±—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞
        
        response = await client.audio.transcriptions.create(
            model="whisper-1",
            file=voice_file,
            language="ru"
        )
        
        transcribed_text = response.text.strip()
        logger.info(f"‚úÖ –ì–æ–ª–æ—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω: {transcribed_text[:100]}...")
        return transcribed_text
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º."

async def analyze_answer(theory_text: str, question_text: str, user_answer_text: str) -> Optional[Tuple[bool, str]]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ OpenAI"""
    try:
        client = get_openai_client()
        if client is None:
            # Fallback –∞–Ω–∞–ª–∏–∑ –±–µ–∑ OpenAI
            logger.warning("‚ö†Ô∏è OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑")
            return analyze_answer_fallback(user_answer_text)
        
        prompt = await build_check_answer_prompt(theory_text, question_text, user_answer_text)
        
        response = await client.chat.completions.create(
            model=config.OPENAI_MODEL,
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."
                },
                {
                    "role": "user", 
                    "content": prompt
                }
            ],
            temperature=config.OPENAI_TEMPERATURE,
            max_tokens=config.OPENAI_MAX_TOKENS
        )
        
        result_text = response.choices[0].message.content.strip()
        logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç OpenAI: {result_text}")
        
        # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
        try:
            result = json.loads(result_text)
            is_sufficient = result.get("is_sufficient", False)
            recommendation = result.get("recommendation", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞")
            
            return is_sufficient, recommendation
            
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç OpenAI: {e}")
            logger.error(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {result_text}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –µ—Å–ª–∏ JSON –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
            return False, "–†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –¥–∞—Ç—å –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç."
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ OpenAI: {e}")
        # Fallback –∞–Ω–∞–ª–∏–∑
        return analyze_answer_fallback(user_answer_text)

def analyze_answer_fallback(user_answer_text: str) -> Tuple[bool, str]:
    """–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ –±–µ–∑ OpenAI"""
    answer_length = len(user_answer_text.strip())
    
    if answer_length < 10:
        return False, "–û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–∞—Ç—å –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç."
    elif answer_length < 30:
        return False, "–û—Ç–≤–µ—Ç –∫—Ä–∞—Ç–∫–∏–π. –†–µ–∫–æ–º–µ–Ω–¥—É—é –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –∏–∑ –∏–∑—É—á–µ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞."
    elif answer_length < 100:
        return True, "–•–æ—Ä–æ—à–∏–π –æ—Ç–≤–µ—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ–º."
    else:
        return True, "–û—Ç–ª–∏—á–Ω—ã–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç! –í—ã —Ö–æ—Ä–æ—à–æ —É—Å–≤–æ–∏–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª."

async def generate_final_report(answers_analysis: list) -> str:
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ç–µ—Å—Ç—É"""
    try:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_questions = len(answers_analysis)
        sufficient_answers = sum(1 for analysis in answers_analysis if analysis["is_sufficient"])
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = []
        for i, analysis in enumerate(answers_analysis, 1):
            if not analysis["is_sufficient"]:
                recommendations.append(f"{i}. {analysis['recommendation']}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_parts = [
            f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–µ–≥–æ —Ç–µ—Å—Ç–∞:**\n",
            f"‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {sufficient_answers}/{total_questions}",
            f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {(sufficient_answers/total_questions)*100:.1f}%\n"
        ]
        
        if recommendations:
            report_parts.append("üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:**\n")
            report_parts.extend(recommendations)
        else:
            report_parts.append("üéâ **–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!** –í—Å–µ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª–Ω—ã–µ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ!")
        
        report_parts.append("\nüìö –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ–º!")
        
        return "\n".join(report_parts)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        return "üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∏–∑—É—á–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª."