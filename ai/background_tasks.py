import asyncio
import logging
from typing import List, Dict
from aiogram import Bot
from ai.ai_processor import analyze_answer, generate_final_report
from database.db_functions import (
    get_test_answers, 
    get_theory_for_block, 
    save_ai_analysis, 
    update_test_attempt_status,
    update_user_progress,
    get_content_block
)
from database.models import TestStatus
from utils.keyboards import get_test_feedback_keyboard

logger = logging.getLogger(__name__)

async def run_ai_analysis_and_notify(bot: Bot, user_id: int, attempt_id: int):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ò–ò –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ "–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è"
        await update_test_attempt_status(attempt_id, TestStatus.ANALYZING)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        answers = await get_test_answers(attempt_id)
        if not answers:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ—Ç–≤–µ—Ç—ã –¥–ª—è attempt_id {attempt_id}")
            return
        
        total_questions = len(answers)
        block_id = answers[0]["block_id"]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–æ—Ä–∏—é –¥–ª—è –±–ª–æ–∫–∞
        theory_text = await get_theory_for_block(block_id)
        if not theory_text:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–µ–æ—Ä–∏—è –¥–ª—è block_id {block_id}")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_message = await bot.send_message(
            user_id,
            f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã... [0/{total_questions}]"
        )
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç
        analysis_results = []
        
        for i, answer in enumerate(answers):
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                await bot.edit_message_text(
                    f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã... [{i+1}/{total_questions}]",
                    chat_id=user_id,
                    message_id=progress_message.message_id
                )
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –ò–ò
                analysis_result = await analyze_answer(
                    theory_text=theory_text,
                    question_text=answer["question_text"],
                    user_answer_text=answer["user_answer_text"]
                )
                
                if analysis_result:
                    is_sufficient, recommendation = analysis_result
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ –ë–î
                    await save_ai_analysis(
                        answer_id=answer["answer_id"],
                        is_sufficient=is_sufficient,
                        recommendation=recommendation
                    )
                    
                    analysis_results.append({
                        "question_text": answer["question_text"],
                        "user_answer_text": answer["user_answer_text"],
                        "is_sufficient": is_sufficient,
                        "recommendation": recommendation
                    })
                    
                    logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ {i+1}/{total_questions} –∑–∞–≤–µ—Ä—à–µ–Ω")
                else:
                    # –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
                    await save_ai_analysis(
                        answer_id=answer["answer_id"],
                        is_sufficient=False,
                        recommendation="–†–µ–∫–æ–º–µ–Ω–¥—É—é –∏–∑—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ."
                    )
                    
                    analysis_results.append({
                        "question_text": answer["question_text"],
                        "user_answer_text": answer["user_answer_text"],
                        "is_sufficient": False,
                        "recommendation": "–†–µ–∫–æ–º–µ–Ω–¥—É—é –∏–∑—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ."
                    })
                    
                    logger.warning(f"‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ {i+1}/{total_questions} –Ω–µ —É–¥–∞–ª—Å—è")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
                await asyncio.sleep(1)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–≤–µ—Ç–∞ {i+1}: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –±–∞–∑–æ–≤–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π
                analysis_results.append({
                    "question_text": answer["question_text"],
                    "user_answer_text": answer["user_answer_text"],
                    "is_sufficient": False,
                    "recommendation": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞. –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª."
                })
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        final_report = await generate_final_report(analysis_results)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–≤—ã–º –æ—Ç—á–µ—Ç–æ–º
        await bot.edit_message_text(
            final_report,
            chat_id=user_id,
            message_id=progress_message.message_id,
            reply_markup=get_test_feedback_keyboard(attempt_id),
            parse_mode="Markdown"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ "–∑–∞–≤–µ—Ä—à–µ–Ω"
        await update_test_attempt_status(attempt_id, TestStatus.COMPLETED)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ
        block = await get_content_block(block_id)
        if block:
            sufficient_count = sum(1 for result in analysis_results if result["is_sufficient"])
            success_rate = sufficient_count / total_questions if total_questions > 0 else 0
            
            # –°—á–∏—Ç–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º –µ—Å–ª–∏ >= 70% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            if success_rate >= 0.7:
                await update_user_progress(user_id, block["block_order"])
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –±–ª–æ–∫ {block['block_order']}")
        
        logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–∞ –¥–ª—è attempt_id {attempt_id} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_message(
                user_id,
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤.\n"
                "–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ–∑–∂–µ."
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–æ—à–∏–±–∫–∞"
            await update_test_attempt_status(attempt_id, TestStatus.FAILED)
            
        except Exception as notify_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {notify_error}")

def create_background_task(bot: Bot, user_id: int, attempt_id: int):
    """–°–æ–∑–¥–∞—Ç—å —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    task = asyncio.create_task(
        run_ai_analysis_and_notify(bot, user_id, attempt_id)
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ –∑–∞–¥–∞—á—É
    def handle_task_exception(task):
        try:
            exception = task.exception()
            if exception:
                logger.error(f"‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {exception}")
        except asyncio.InvalidStateError:
            pass  # –ó–∞–¥–∞—á–∞ –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
    
    task.add_done_callback(handle_task_exception)
    return task