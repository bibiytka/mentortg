import logging
import math
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from database.db_functions import (
    get_content_blocks, get_content_block, update_block_content,
    get_users_statistics, is_maintenance_mode, toggle_maintenance_mode,
    get_ai_analytics_data
)
import config
from fsm.states import AdminContent
from utils.keyboards import (
    get_admin_menu_keyboard, get_admin_content_keyboard, get_admin_stats_keyboard,
    get_ai_analytics_keyboard, get_ai_blocks_keyboard, get_back_keyboard
)
from utils.constants import MESSAGES, LIMITS

logger = logging.getLogger(__name__)
router = Router()

# === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò ===

@router.callback_query(F.data == "menu_admin")
async def show_admin_menu(callback: CallbackQuery, is_admin: bool = False, is_super_admin: bool = False):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if not is_admin:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        maintenance = await is_maintenance_mode()
        
        await callback.message.edit_text(
            MESSAGES["admin_panel"],
            reply_markup=get_admin_menu_keyboard(is_super_admin, maintenance),
            parse_mode="Markdown"
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_admin_menu: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")

# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–¢–ï–ù–¢–û–ú ===

@router.callback_query(F.data == "admin_content")
async def show_content_management(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
    try:
        blocks = await get_content_blocks()
        if not blocks:
            await callback.message.edit_text(
                "‚öôÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º**\n\n–ë–ª–æ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=get_back_keyboard("admin"),
                parse_mode="Markdown"
            )
            await callback.answer()
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –±–ª–æ–∫
        first_block = blocks[0]
        await state.set_state(AdminContent.viewing_block)
        await state.update_data(
            blocks=blocks,
            current_block_index=0
        )
        
        await show_content_block(callback, first_block, 1, len(blocks))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_content_management: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")

@router.callback_query(F.data.startswith("content_nav_"))
async def navigate_content_blocks(callback: CallbackQuery, state: FSMContext):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        target_index = int(callback.data.split("_")[-1]) - 1  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ 0-based –∏–Ω–¥–µ–∫—Å—É
        data = await state.get_data()
        blocks = data.get("blocks", [])
        
        if 0 <= target_index < len(blocks):
            await state.update_data(current_block_index=target_index)
            target_block = blocks[target_index]
            await show_content_block(callback, target_block, target_index + 1, len(blocks))
        else:
            await callback.answer("–ë–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ navigate_content_blocks: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")

async def show_content_block(callback: CallbackQuery, block: dict, current: int, total: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –±–ª–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –±–ª–æ–∫–∞
        preview_parts = []
        
        if block["theory_text"]:
            preview_parts.append(f"üìù –¢–µ–∫—Å—Ç: {len(block['theory_text'])} —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            preview_parts.append("üìù –¢–µ–∫—Å—Ç: –Ω–µ –∑–∞–¥–∞–Ω")
        
        if block["video_file_id"]:
            preview_parts.append("üé• –í–∏–¥–µ–æ: –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
        else:
            preview_parts.append("üé• –í–∏–¥–µ–æ: –Ω–µ—Ç")
        
        if block["pdf_file_id"]:
            preview_parts.append("üìÑ PDF: –∑–∞–≥—Ä—É–∂–µ–Ω")
        else:
            preview_parts.append("üìÑ PDF: –Ω–µ—Ç")
        
        preview_text = "\n".join(preview_parts)
        
        await callback.message.edit_text(
            MESSAGES["admin_content"].format(
                current=current,
                total=total,
                title=block["title"],
                preview=preview_text
            ),
            reply_markup=get_admin_content_keyboard(block["id"], current, total),
            parse_mode="Markdown"
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_content_block: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª–æ–∫–∞")

# === –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–¢–ï–ù–¢–ê ===

@router.callback_query(F.data.startswith("content_edit_text_"))
async def edit_content_text(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –±–ª–æ–∫–∞"""
    try:
        block_id = int(callback.data.split("_")[-1])
        
        await state.set_state(AdminContent.waiting_for_text)
        await state.update_data(editing_block_id=block_id)
        
        await callback.message.edit_text(
            MESSAGES["send_new_text"],
            reply_markup=get_back_keyboard("admin"),
            parse_mode="Markdown"
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_content_text: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

@router.callback_query(F.data.startswith("content_edit_video_"))
async def edit_content_video(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –±–ª–æ–∫–∞"""
    try:
        block_id = int(callback.data.split("_")[-1])
        
        await state.set_state(AdminContent.waiting_for_video)
        await state.update_data(editing_block_id=block_id)
        
        await callback.message.edit_text(
            MESSAGES["send_new_video"],
            reply_markup=get_back_keyboard("admin"),
            parse_mode="Markdown"
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_content_video: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

@router.callback_query(F.data.startswith("content_edit_pdf_"))
async def edit_content_pdf(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å PDF –±–ª–æ–∫–∞"""
    try:
        block_id = int(callback.data.split("_")[-1])
        
        await state.set_state(AdminContent.waiting_for_pdf)
        await state.update_data(editing_block_id=block_id)
        
        await callback.message.edit_text(
            MESSAGES["send_new_pdf"],
            reply_markup=get_back_keyboard("admin"),
            parse_mode="Markdown"
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_content_pdf: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

# === –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ì–†–£–ó–ö–ò –ö–û–ù–¢–ï–ù–¢–ê ===

@router.message(AdminContent.waiting_for_text)
async def save_content_text(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –±–ª–æ–∫–∞"""
    try:
        data = await state.get_data()
        block_id = data["editing_block_id"]
        
        if len(message.text) > LIMITS["max_theory_length"]:
            await message.answer(
                f"‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º {LIMITS['max_theory_length']} —Å–∏–º–≤–æ–ª–æ–≤."
            )
            return
        
        await update_block_content(block_id, theory_text=message.text)
        
        await message.answer(
            MESSAGES["admin_content_updated"],
            reply_markup=get_back_keyboard("admin")
        )
        
        await state.set_state(AdminContent.viewing_block)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ save_content_text: {e}")
        await message.answer(MESSAGES["error_generic"])

@router.message(AdminContent.waiting_for_video)
async def save_content_video(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ –±–ª–æ–∫–∞"""
    try:
        data = await state.get_data()
        block_id = data["editing_block_id"]
        
        if message.video:
            file_id = message.video.file_id
            await update_block_content(block_id, video_file_id=file_id)
            await message.answer("‚úÖ –í–∏–¥–µ–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        else:
            await update_block_content(block_id, video_file_id=None)
            await message.answer("‚úÖ –í–∏–¥–µ–æ —É–¥–∞–ª–µ–Ω–æ!")
        
        await state.set_state(AdminContent.viewing_block)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ save_content_video: {e}")
        await message.answer(MESSAGES["error_generic"])

@router.message(AdminContent.waiting_for_pdf)
async def save_content_pdf(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π PDF –±–ª–æ–∫–∞"""
    try:
        data = await state.get_data()
        block_id = data["editing_block_id"]
        
        if message.document and message.document.mime_type == "application/pdf":
            file_id = message.document.file_id
            await update_block_content(block_id, pdf_file_id=file_id)
            await message.answer("‚úÖ PDF –æ–±–Ω–æ–≤–ª–µ–Ω!")
        else:
            await update_block_content(block_id, pdf_file_id=None)
            await message.answer("‚úÖ PDF —É–¥–∞–ª–µ–Ω!")
        
        await state.set_state(AdminContent.viewing_block)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ save_content_pdf: {e}")
        await message.answer(MESSAGES["error_generic"])

# === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===

@router.callback_query(F.data == "admin_stats")
async def show_statistics(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        await show_stats_page(callback, page=1)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_statistics: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@router.callback_query(F.data.startswith("stats_page_"))
async def navigate_stats_pages(callback: CallbackQuery):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        page = int(callback.data.split("_")[-1])
        await show_stats_page(callback, page)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ navigate_stats_pages: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")

async def show_stats_page(callback: CallbackQuery, page: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        offset = (page - 1) * LIMITS["users_per_page"]
        users, total = await get_users_statistics(offset=offset, limit=LIMITS["users_per_page"])
        
        if not users:
            await callback.message.edit_text(
                "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=get_back_keyboard("admin"),
                parse_mode="Markdown"
            )
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_text = []
        
        for i, user in enumerate(users, offset + 1):
            username = f"@{user['username']}" if user['username'] else "–±–µ–∑ username"
            stats_text.append(f"{i}. {user['full_name']} ({username})")
            stats_text.append(f"   {user['progress_text']}")
        
        total_pages = math.ceil(total / LIMITS["users_per_page"])
        stats_text.append(f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages} ‚Ä¢ –í—Å–µ–≥–æ: {total}")
        
        await callback.message.edit_text(
            MESSAGES["admin_stats"].format(stats_text="\n".join(stats_text)),
            reply_markup=get_admin_stats_keyboard(
                page, total_pages,
                has_prev=page > 1, has_next=page < total_pages
            ),
            parse_mode="Markdown"
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_stats_page: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")

# === –ê–ù–ê–õ–ò–¢–ò–ö–ê –ò–ò ===

@router.callback_query(F.data == "admin_ai_analytics")
async def show_ai_analytics(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ò–ò"""
    try:
        analytics = await get_ai_analytics_data()
        
        total_feedback = analytics['positive_ratings'] + analytics['negative_ratings']
        feedback_rate = (analytics['positive_ratings'] / total_feedback * 100) if total_feedback > 0 else 0
        
        analytics_text = (
            "üìâ **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ò–ò - –û–±–∑–æ—Ä**\n\n"
            "ü§ñ **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤: {analytics['total_analyses']}\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {analytics['successful_analyses']} ({analytics.get('avg_success_rate', 0):.1f}%)\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫: {analytics['failed_analyses']}\n\n"
            "üë• **–û—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n"
            f"‚Ä¢ üëç –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ: {analytics['positive_ratings']}\n"
            f"‚Ä¢ üëé –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ: {analytics['negative_ratings']}\n"
            f"‚Ä¢ ü§∑ –ë–µ–∑ –æ—Ü–µ–Ω–∫–∏: {analytics['no_ratings']}\n"
            f"‚Ä¢ üìà –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {feedback_rate:.1f}%\n\n"
            f"üìÖ **–û–±–Ω–æ–≤–ª–µ–Ω–æ:** {analytics['last_updated']}"
        )
        
        await callback.message.edit_text(
            analytics_text,
            reply_markup=get_ai_analytics_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_ai_analytics: {e}")
        
        fallback_text = (
            "üìâ **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ò–ò**\n\n"
            "‚ö†Ô∏è **–°—Ç–∞—Ç—É—Å:** –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö...\n\n"
            "üí° **–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:**\n"
            "‚Ä¢ –ü—Ä–æ–π–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤\n"
            "‚Ä¢ –û—Ü–µ–Ω–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã –ò–ò (üëç/üëé)\n"
            f"üìÖ **–í—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        
        await callback.message.edit_text(
            fallback_text,
            reply_markup=get_back_keyboard("admin"),
            parse_mode="Markdown"
        )
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")

@router.callback_query(F.data == "ai_analytics_blocks")
async def show_blocks_analytics(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –±–ª–æ–∫–∞–º"""
    try:
        analytics = await get_ai_analytics_data()
        
        if not analytics['blocks']:
            await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –±–ª–æ–∫–∞–º", show_alert=True)
            return
        
        blocks_text = ["üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –±–ª–æ–∫–∞–º:**\n"]
        
        for block in analytics['blocks']:
            if block['total_answers'] > 0:
                total_feedback = block['positive_feedback'] + block['negative_feedback']
                
                blocks_text.append(f"üìö **{block['title']}**")
                blocks_text.append(f"‚Ä¢ –¢–µ—Å—Ç–æ–≤: {block['total_tests']}")
                blocks_text.append(f"‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤: {block['total_answers']}")
                blocks_text.append(f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {block['success_rate']:.1f}%")
                
                if total_feedback > 0:
                    blocks_text.append(f"‚Ä¢ üëç {block['positive_feedback']} / üëé {block['negative_feedback']}")
                    blocks_text.append(f"‚Ä¢ –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {block['feedback_rate']:.1f}%")
                else:
                    blocks_text.append("‚Ä¢ –û—Ü–µ–Ω–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç")
                
                blocks_text.append("")
        
        if len(blocks_text) == 1:
            blocks_text.append("–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.")
        
        await callback.message.edit_text(
            "\n".join(blocks_text),
            reply_markup=get_ai_blocks_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_blocks_analytics: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")

@router.callback_query(F.data == "ai_analytics_best")
async def show_best_feedback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–ª–æ–∫–∏ —Å –ª—É—á—à–∏–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏"""
    try:
        analytics = await get_ai_analytics_data()
        
        best_text = ["üëç **–ë–ª–æ–∫–∏ —Å –ª—É—á—à–∏–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏:**\n"]
        
        if analytics['best_feedback_blocks']:
            for i, block in enumerate(analytics['best_feedback_blocks'], 1):
                best_text.append(f"{i}. **{block['title']}**")
                best_text.append(f"   ‚Ä¢ üëç {block['positive_feedback']} / üëé {block['negative_feedback']}")
                best_text.append(f"   ‚Ä¢ –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {block['feedback_rate']:.1f}%")
                best_text.append(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {block['total_tests']}")
                best_text.append("")
        else:
            best_text.append("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        
        await callback.message.edit_text(
            "\n".join(best_text),
            reply_markup=get_ai_analytics_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_best_feedback: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")

@router.callback_query(F.data == "ai_analytics_worst")
async def show_worst_feedback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–ª–æ–∫–∏ —Å —Ö—É–¥—à–∏–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏"""
    try:
        analytics = await get_ai_analytics_data()
        
        worst_text = ["üëé **–ë–ª–æ–∫–∏ —Ç—Ä–µ–±—É—é—â–∏–µ —É–ª—É—á—à–µ–Ω–∏—è:**\n"]
        
        if analytics['worst_feedback_blocks']:
            for i, block in enumerate(analytics['worst_feedback_blocks'], 1):
                worst_text.append(f"{i}. **{block['title']}**")
                worst_text.append(f"   ‚Ä¢ üëç {block['positive_feedback']} / üëé {block['negative_feedback']}")
                worst_text.append(f"   ‚Ä¢ –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {block['feedback_rate']:.1f}%")
                worst_text.append(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {block['total_tests']}")
                worst_text.append("")
            
            worst_text.append("üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
            worst_text.append("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ç–µ–æ—Ä–∏–∏")
            worst_text.append("‚Ä¢ –û–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –ò–ò")
            worst_text.append("‚Ä¢ –£–ª—É—á—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ç–µ—Å—Ç–∞—Ö")
        else:
            worst_text.append("–ù–µ—Ç –±–ª–æ–∫–æ–≤ —Å –ø–ª–æ—Ö–∏–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏.")
        
        await callback.message.edit_text(
            "\n".join(worst_text),
            reply_markup=get_ai_analytics_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_worst_feedback: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")

# === –ù–ê–°–¢–†–û–ô–ö–ò ===

@router.callback_query(F.data == "admin_maintenance")
async def toggle_maintenance(callback: CallbackQuery, is_super_admin: bool = False):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
    if not is_super_admin:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    try:
        new_state = await toggle_maintenance_mode()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        await callback.message.edit_text(
            MESSAGES["admin_panel"],
            reply_markup=get_admin_menu_keyboard(is_super_admin, new_state),
            parse_mode="Markdown"
        )
        
        status_text = MESSAGES["maintenance_enabled"] if new_state else MESSAGES["maintenance_disabled"]
        await callback.answer(status_text, show_alert=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ toggle_maintenance: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞")