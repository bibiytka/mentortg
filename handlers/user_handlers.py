import logging
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InputFile
from aiogram.exceptions import TelegramBadRequest 

from database.db_functions import (
    get_or_create_user, get_content_blocks, get_content_block,
    get_questions_for_block, create_test_attempt, get_active_test_attempt,
    save_user_answer, get_answered_questions_count, save_feedback_rating,
    cancel_test_attempt
)
from fsm.states import Test
from utils.keyboards import (
    get_main_menu_keyboard, get_theory_menu_keyboard, get_theory_view_keyboard,
    get_tests_menu_keyboard, get_test_feedback_keyboard, get_back_keyboard,
    get_active_test_keyboard, get_test_in_progress_keyboard
)
from utils.constants import MESSAGES, EMOJI
from ai.ai_processor import transcribe_voice
from ai.background_tasks import create_background_task

logger = logging.getLogger(__name__)
router = Router()

# === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===

@router.message(Command("start"))
async def cmd_start(message: Message, is_admin: bool = False):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await get_or_create_user(
            user_id=message.from_user.id,
            username=message.from_user.username,
            full_name=message.from_user.full_name
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(
            MESSAGES["main_menu"].format(name=message.from_user.full_name),
            reply_markup=get_main_menu_keyboard(is_admin=is_admin),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_start: {e}")
        await message.answer(MESSAGES["error_generic"])

@router.callback_query(F.data == "menu_main")
async def show_main_menu(callback: CallbackQuery, is_admin: bool = False):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        await callback.message.delete()
        await callback.message.answer(
            MESSAGES["main_menu"].format(name=callback.from_user.full_name),
            reply_markup=get_main_menu_keyboard(is_admin=is_admin),
            parse_mode="Markdown"
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_main_menu: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, –ø—Ä–æ–±—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        try:
            await callback.message.edit_text(
                MESSAGES["main_menu"].format(name=callback.from_user.full_name),
                reply_markup=get_main_menu_keyboard(is_admin=is_admin),
                parse_mode="Markdown"
            )
            await callback.answer()
        except Exception:
            await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")

# === –¢–ï–û–†–ò–Ø ===

@router.callback_query(F.data == "menu_theory")
async def show_theory_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ç–µ–æ—Ä–∏–∏"""
    try:
        blocks = await get_content_blocks()
        
        if not blocks:
            message_text = "üìö **–¢–µ–æ—Ä–∏—è**\n\n–ë–ª–æ–∫–∏ —Ç–µ–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã."
            keyboard = get_back_keyboard("main")
        else:
            message_text = MESSAGES["theory_menu"]
            keyboard = get_theory_menu_keyboard(blocks)
        
        # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω—é —Ç–µ–æ—Ä–∏–∏
        await callback.message.delete()
        await callback.message.answer(
            message_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_theory_menu: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, –ø—Ä–æ–±—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        try:
            blocks = await get_content_blocks()
            if not blocks:
                await callback.message.edit_text(
                    "üìö **–¢–µ–æ—Ä–∏—è**\n\n–ë–ª–æ–∫–∏ —Ç–µ–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.",
                    reply_markup=get_back_keyboard("main"),
                    parse_mode="Markdown"
                )
            else:
                await callback.message.edit_text(
                    MESSAGES["theory_menu"],
                    reply_markup=get_theory_menu_keyboard(blocks),
                    parse_mode="Markdown"
                )
            await callback.answer()
        except Exception:
            await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–æ—Ä–∏–∏")

@router.callback_query(F.data.startswith("theory_view_"))
async def view_theory(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–ª–æ–∫–∞ —Ç–µ–æ—Ä–∏–∏ (—Ç–µ–∫—Å—Ç + –º–µ–¥–∏–∞ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)"""
    try:
        block_id = int(callback.data.split("_")[-1])
        block = await get_content_block(block_id)

        if not block:
            await callback.answer("–ë–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–ª–æ–∫–∞
        text_part = block["theory_text"] or "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã."
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É caption (–ª–∏–º–∏—Ç Telegram - 1024 —Å–∏–º–≤–æ–ª–∞)
        max_caption_length = 950  # –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        if len(text_part) > max_caption_length:
            text_part = text_part[:max_caption_length] + "..."
        
        caption = MESSAGES["theory_block"].format(
            title=block["title"],
            content=text_part
        )

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        keyboard = get_theory_view_keyboard(block_id)
        
        if block["video_file_id"]:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å —Ç–µ–∫—Å—Ç–æ–º –≤ caption
            new_message = await callback.message.answer_video(
                video=block["video_file_id"],
                caption=caption,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        elif block["pdf_file_id"]:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF —Å —Ç–µ–∫—Å—Ç–æ–º –≤ caption
            new_message = await callback.message.answer_document(
                document=block["pdf_file_id"],
                caption=caption,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞
            new_message = await callback.message.answer(
                caption,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        await state.update_data(
            last_theory_message_id=new_message.message_id,
            last_theory_message_type="media" if (block["video_file_id"] or block["pdf_file_id"]) else "text"
        )
        
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ view_theory: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–ª–æ–∫–∞")

@router.callback_query(F.data == "menu_theory_back")
async def back_to_theory_menu(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç–µ–æ—Ä–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫–∏ —Ç–µ–æ—Ä–∏–∏
        blocks = await get_content_blocks()
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ–≤–∞–∂–Ω–æ –∫–∞–∫–æ–≥–æ —Ç–∏–ø–∞)
        await callback.message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é —Ç–µ–æ—Ä–∏–∏
        if not blocks:
            await callback.message.answer(
                "üìö **–¢–µ–æ—Ä–∏—è**\n\n–ë–ª–æ–∫–∏ —Ç–µ–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.",
                reply_markup=get_back_keyboard("main"),
                parse_mode="Markdown"
            )
        else:
            await callback.message.answer(
                MESSAGES["theory_menu"],
                reply_markup=get_tests_menu_keyboard(blocks),
                parse_mode="Markdown"
            )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(
            last_theory_message_id=None,
            last_theory_message_type=None
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_theory_menu: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")

# === –¢–ï–°–¢–´ ===

@router.callback_query(F.data == "menu_tests")
async def show_tests_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ç–µ—Å—Ç–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å
        user = await get_or_create_user(
            user_id=callback.from_user.id,
            username=callback.from_user.username,
            full_name=callback.from_user.full_name
        )
        
        blocks = await get_content_blocks()
        
        if not blocks:
            await callback.message.edit_text(
                "üìù **–¢–µ—Å—Ç—ã**\n\n–¢–µ—Å—Ç—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.",
                reply_markup=get_back_keyboard("main"),
                parse_mode="Markdown"
            )
            await callback.answer()
            return
        
        await callback.message.edit_text(
            MESSAGES["tests_menu"],
            reply_markup=get_tests_menu_keyboard(blocks, user["last_completed_block_order"]),
            parse_mode="Markdown"
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_tests_menu: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤")

@router.callback_query(F.data.startswith("test_locked_"))
async def test_locked(callback: CallbackQuery):
    """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç"""
    await callback.answer(MESSAGES["test_locked"], show_alert=True)

@router.callback_query(F.data.startswith("test_start_"))
async def start_test(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ (—É—á—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–µ–¥–∏–∞)"""
    try:
        block_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç
        active_test = await get_active_test_attempt(user_id)
        if active_test:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º block_id –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
            await state.update_data(pending_test_block_id=block_id)

            message_text = (
                f"‚ö†Ô∏è **–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç**\n\n"
                f"–¢–µ—Å—Ç: {active_test['block_title']}\n\n"
                f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
            )
            keyboard = get_active_test_keyboard(active_test)

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å,
            # –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ (–º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ) ‚Äî —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–Ω–æ–≤–æ.
            try:
                await callback.message.edit_text(
                    message_text,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
            except TelegramBadRequest:
                # –ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞)
                try:
                    await callback.message.delete()
                except Exception:
                    pass
                await callback.message.answer(
                    message_text,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )

            await callback.answer()
            return

        # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –Ω–µ—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π
        await start_new_test(callback, state, bot, block_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_test: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞")

async def start_new_test(callback: CallbackQuery, state: FSMContext, bot: Bot, block_id: int):
    """–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Å—Ç (–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
    try:
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
        questions = await get_questions_for_block(block_id)
        if not questions:
            await callback.answer("–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ø—ã—Ç–∫—É
        attempt_id = await create_test_attempt(user_id, block_id)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FSM
        await state.set_state(Test.in_progress)
        await state.update_data(
            attempt_id=attempt_id,
            block_id=block_id,
            questions=questions,
            current_question_index=0,
            test_message_id=callback.message.message_id,
            pending_test_block_id=None  # –û—á–∏—â–∞–µ–º pending test
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        first_question = questions[0]
        await callback.message.edit_text(
            MESSAGES["test_started"].format(
                current=1,
                total=len(questions),
                question=first_question["question_text"]
            ),
            reply_markup=get_test_in_progress_keyboard(),
            parse_mode="Markdown"
        )
        
        await callback.answer("–¢–µ—Å—Ç –Ω–∞—á–∞–ª—Å—è! –û—Ç–≤–µ—á–∞–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_new_test: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞")

@router.callback_query(F.data == "test_continue")
async def continue_test_callback(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç"""
    try:
        user_id = callback.from_user.id
        
        active_test = await get_active_test_attempt(user_id)
        if not active_test:
            await callback.answer("–ê–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        attempt_id = active_test["attempt_id"]
        block_id = active_test["block_id"]
        
        questions = await get_questions_for_block(block_id)
        answered_count = await get_answered_questions_count(attempt_id)
        
        if answered_count >= len(questions):
            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.delete()
            await callback.message.answer(
                "‚ùì –í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.",
                reply_markup=get_back_keyboard("tests"),
                parse_mode="Markdown"
            )
            await callback.answer()
            return
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FSM
        await state.set_state(Test.in_progress)
        await state.update_data(
            attempt_id=attempt_id,
            block_id=block_id,
            questions=questions,
            current_question_index=answered_count
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        next_question = questions[answered_count]
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–µ–¥–∏–∞)
        await callback.message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ—Å—Ç–æ–º
        new_message = await callback.message.answer(
            MESSAGES["test_continued"].format(title=active_test["block_title"]) +
            MESSAGES["test_next_question"].format(
                current=answered_count + 1,
                total=len(questions),
                question=next_question["question_text"]
            ),
            reply_markup=get_test_in_progress_keyboard(),
            parse_mode="Markdown"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await state.update_data(test_message_id=new_message.message_id)
        
        await callback.answer("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ continue_test_callback: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç–µ—Å—Ç–∞")

@router.callback_query(F.data == "test_cancel_and_new")
async def cancel_and_start_new(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–µ—Å—Ç –∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π"""
    try:
        user_id = callback.from_user.id
        
        # –û—Ç–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç
        cancelled = await cancel_test_attempt(user_id)
        if not cancelled:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º block_id –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
        data = await state.get_data()
        block_id = data.get("pending_test_block_id")
        
        if not block_id:
            # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ—Ç pending test, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤
            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–µ–¥–∏–∞
            await callback.message.delete()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é —Ç–µ—Å—Ç–æ–≤
            await callback.message.answer(
                MESSAGES["tests_menu"],
                reply_markup=get_tests_menu_keyboard(await get_content_blocks(), 0),
                parse_mode="Markdown"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
        questions = await get_questions_for_block(block_id)
        if not questions:
            await callback.answer("–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ø—ã—Ç–∫—É
        attempt_id = await create_test_attempt(user_id, block_id)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FSM
        await state.set_state(Test.in_progress)
        await state.update_data(
            attempt_id=attempt_id,
            block_id=block_id,
            questions=questions,
            current_question_index=0,
            pending_test_block_id=None  # –û—á–∏—â–∞–µ–º pending test
        )
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–µ–¥–∏–∞)
        await callback.message.delete()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        first_question = questions[0]
        new_message = await callback.message.answer(
            MESSAGES["test_started"].format(
                current=1,
                total=len(questions),
                question=first_question["question_text"]
            ),
            reply_markup=get_test_in_progress_keyboard(),
            parse_mode="Markdown"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await state.update_data(test_message_id=new_message.message_id)
        
        await callback.answer("–¢–µ—Å—Ç –Ω–∞—á–∞–ª—Å—è! –û—Ç–≤–µ—á–∞–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_and_start_new: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç–µ—Å—Ç–∞")

@router.callback_query(F.data == "test_cancel_current")
async def cancel_current_test(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–µ—Å—Ç –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è"""
    try:
        user_id = callback.from_user.id
        
        # –û—Ç–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç
        cancelled = await cancel_test_attempt(user_id)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        if cancelled:
            await callback.message.edit_text(
                "‚ùå **–¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω**\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Å—Ç –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–∑—É—á–µ–Ω–∏—é —Ç–µ–æ—Ä–∏–∏.",
                reply_markup=get_back_keyboard("tests"),
                parse_mode="Markdown"
            )
            await callback.answer("–¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω")
        else:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç", show_alert=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_current_test: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç–µ—Å—Ç–∞")

# === –û–¢–ú–ï–ù–ê –¢–ï–°–¢–ê ===

@router.message(Command("cancel"))
async def cancel_test_command(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /cancel"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞
        current_state = await state.get_state()
        if current_state != Test.in_progress:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
            return
        
        user_id = message.from_user.id
        
        # –û—Ç–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç
        cancelled = await cancel_test_attempt(user_id)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        if cancelled:
            await message.answer(
                "‚ùå **–¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω**\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Å—Ç –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–∑—É—á–µ–Ω–∏—é —Ç–µ–æ—Ä–∏–∏.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                parse_mode="Markdown"
            )
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_test_command: {e}")
        await message.answer(MESSAGES["error_generic"])

# === –ü–†–û–•–û–ñ–î–ï–ù–ò–ï –¢–ï–°–¢–ê ===

@router.message(Test.in_progress)
async def process_test_answer(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—Å—Ç–µ"""
    try:
        data = await state.get_data()
        attempt_id = data["attempt_id"]
        questions = data["questions"]
        current_index = data["current_question_index"]
        test_message_id = data["test_message_id"]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        answer_text = ""
        if message.text:
            answer_text = message.text[:1000]
        elif message.voice:
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –≥–æ–ª–æ—Å
            voice_file = await bot.get_file(message.voice.file_id)
            voice_data = await bot.download_file(voice_file.file_path)
            
            transcribed = await transcribe_voice(voice_data.read())
            if transcribed:
                answer_text = transcribed[:1000]
            else:
                await message.answer("üòî –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
        else:
            await message.answer("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        current_question = questions[current_index]
        await save_user_answer(attempt_id, current_question["id"], answer_text)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.delete()
        except Exception:
            pass
        
        # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        next_index = current_index + 1
        
        if next_index < len(questions):
            # –ï—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã
            await state.update_data(current_question_index=next_index)
            next_question = questions[next_index]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ—Å—Ç–æ–º
            await bot.edit_message_text(
                MESSAGES["test_next_question"].format(
                    current=next_index + 1,
                    total=len(questions),
                    question=next_question["question_text"]
                ),
                chat_id=message.chat.id,
                message_id=test_message_id,
                reply_markup=get_test_in_progress_keyboard(),
                parse_mode="Markdown"
            )
        else:
            # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
            await bot.edit_message_text(
                MESSAGES["test_completed"],
                chat_id=message.chat.id,
                message_id=test_message_id,
                parse_mode="Markdown"
            )
            
            await state.clear()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
            create_background_task(bot, message.from_user.id, attempt_id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_test_answer: {e}")
        await message.answer(MESSAGES["error_generic"])

@router.message(Command("continue"))
async def continue_test(message: Message, state: FSMContext, bot: Bot):
    """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
    try:
        user_id = message.from_user.id
        
        active_test = await get_active_test_attempt(user_id)
        if not active_test:
            await message.answer(MESSAGES["test_not_found"])
            return
        
        attempt_id = active_test["attempt_id"]
        block_id = active_test["block_id"]
        
        questions = await get_questions_for_block(block_id)
        answered_count = await get_answered_questions_count(attempt_id)
        
        if answered_count >= len(questions):
            await message.answer("‚ùì –í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")
            return
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FSM
        await state.set_state(Test.in_progress)
        await state.update_data(
            attempt_id=attempt_id,
            block_id=block_id,
            questions=questions,
            current_question_index=answered_count
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        next_question = questions[answered_count]
        test_message = await message.answer(
            MESSAGES["test_continued"].format(title=active_test["block_title"]) +
            MESSAGES["test_next_question"].format(
                current=answered_count + 1,
                total=len(questions),
                question=next_question["question_text"]
            ),
            reply_markup=get_test_in_progress_keyboard(),
            parse_mode="Markdown"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await state.update_data(test_message_id=test_message.message_id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ continue_test: {e}")
        await message.answer(MESSAGES["error_generic"])

# === –û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨ ===

@router.callback_query(F.data.startswith("feedback_"))
async def handle_feedback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞"""
    try:
        parts = callback.data.split("_")
        feedback_type = parts[1]  # "positive" or "negative"
        attempt_id = int(parts[2])
        
        rating = 1 if feedback_type == "positive" else -1
        await save_feedback_rating(attempt_id, rating)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            f"‚úÖ **–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!**\n\n{MESSAGES['feedback_thanks']}\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–∑—É—á–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Ç–µ–º.",
            reply_markup=get_back_keyboard("main"),
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_feedback: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏")

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ù–ï–ò–ó–í–ï–°–¢–ù–´–• CALLBACK ===

@router.callback_query()
async def unknown_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback"""
    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {callback.data}")
    await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)