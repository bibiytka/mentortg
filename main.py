import asyncio
import logging
import os
import sys
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import config
from database.db_functions import init_database
from middleware.auth_middleware import AuthMiddleware
from handlers import user_handlers, admin_handlers

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

async def create_directories():
    """–°–æ–∑–¥–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    directories = [
        'prompts',
        'prompts/templates',
        'logs'
    ]
    
    for directory in directories:
        os.makedirs(directory, exist_ok=True)
        logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {directory} —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

async def create_prompt_template():
    """–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
    template_path = os.path.join(config.PROMPTS_DIR, "check_answer_prompt.txt")
    
    if not os.path.exists(template_path):
        template_content = """–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç-–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –º–æ—Ä—Å–∫–æ–≥–æ –¥–µ–ª–∞ –∏ IT-–º–µ–Ω—Ç–æ—Ä. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ—Ü–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º –Ω–∏–∂–µ —É—á–µ–±–Ω–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–µ.

### –£—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ —Ç–µ–º–µ:
---
{theory_text}
---

### –ó–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:
–í–æ–ø—Ä–æ—Å: "{question_text}"
–û—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞: "{user_answer_text}"

### –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏:
1. –ü–æ–ª–Ω–æ—Ç–∞ –æ—Ç–≤–µ—Ç–∞ - –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –ª–∏ –æ—Ç–≤–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –≤–æ–ø—Ä–æ—Å–∞
2. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ª–∏ —Ñ–∞–∫—Ç—ã –≤ –æ—Ç–≤–µ—Ç–µ —É—á–µ–±–Ω–æ–º—É –º–∞—Ç–µ—Ä–∏–∞–ª—É
3. –ü–æ–Ω–∏–º–∞–Ω–∏–µ - –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–µ–º—ã

### –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
- –û—Å–Ω–æ–≤—ã–≤–∞–π—Å—è –°–¢–†–û–ì–û –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º —É—á–µ–±–Ω–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–µ
- –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Å—É—Ç—å, –Ω–æ –Ω–µ–ø–æ–ª–Ω—ã–π - —Å—á–∏—Ç–∞–π –µ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º
- –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≥—Ä—É–±—ã–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–≤–µ—Ä–µ–Ω - —Å—á–∏—Ç–∞–π –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∏ —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª

### –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (–¢–û–õ–¨–ö–û JSON):
{{"is_sufficient": boolean, "recommendation": "–∫—Ä–∞—Ç–∫–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞"}}"""
        
        with open(template_path, 'w', encoding='utf-8') as f:
            f.write(template_content)
        logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: {template_path}")

async def setup_bot():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        await create_directories()
        
        # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞
        await create_prompt_template()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        await init_database()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        bot = Bot(token=config.BOT_TOKEN)
        storage = MemoryStorage()
        dp = Dispatcher(storage=storage)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware (–í–ê–ñ–ù–û: –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ!)
        dp.message.middleware(AuthMiddleware())
        dp.callback_query.middleware(AuthMiddleware())
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã (–í–ê–ñ–ù–û: admin_handlers –ü–ï–†–ï–î user_handlers –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
        dp.include_router(admin_handlers.router)
        dp.include_router(user_handlers.router)
        
        logger.info("–ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = await bot.get_me()
        logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{bot_info.username} ({bot_info.full_name})")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ
        for admin_id in config.ALL_ADMINS:
            try:
                await bot.send_message(
                    admin_id,
                    f"üöÄ **–ë–æ—Ç {bot_info.full_name} –∑–∞–ø—É—â–µ–Ω!**\n\n"
                    f"üìä **–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:**\n"
                    f"‚Ä¢ –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω—ã: {len(config.SUPER_ADMINS)}\n"
                    f"‚Ä¢ –ê–¥–º–∏–Ω—ã: {len(config.ADMINS)}\n"
                    f"‚Ä¢ Inline –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: ‚úÖ\n"
                    f"‚Ä¢ AI –∞–Ω–∞–ª–∏–∑: ‚úÖ\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
                    parse_mode="Markdown"
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        logger.info("–ó–∞–ø—É—Å–∫ polling...")
        await dp.start_polling(bot, skip_updates=True)
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

async def shutdown_bot(bot: Bot):
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    try:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        for admin_id in config.ALL_ADMINS:
            try:
                await bot.send_message(
                    admin_id,
                    "üî¥ **–ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...**\n\n"
                    f"üìÖ –í—Ä–µ–º—è: {asyncio.get_running_loop().time()}"
                )
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        
        await bot.session.close()
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("=== üöÄ –ó–∞–ø—É—Å–∫ AI Mentor Bot (Inline Version) ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    try:
        if not config.BOT_TOKEN:
            raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        if not config.OPENAI_API_KEY:
            raise ValueError("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        logger.info(f"üëë –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤: {len(config.SUPER_ADMINS)}")
        logger.info(f"üõ°Ô∏è –ê–¥–º–∏–Ω–æ–≤: {len(config.ADMINS)}")
        logger.info(f"üé® –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: Inline")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        asyncio.run(setup_bot())
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)")
    except Exception as e:
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    finally:
        logger.info("=== ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã AI Mentor Bot ===")

if __name__ == "__main__":
    main()