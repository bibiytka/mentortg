

import asyncio
import logging
import signal
import sys
import os
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

import config
from main import setup_bot, shutdown_bot
from aiogram import Bot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

class BotRunner:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–æ–º –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞"""
    
    def __init__(self):
        self.bot = None
        self.should_restart = True
        self.restart_count = 0
        self.max_restarts = 10
        
    async def start_bot(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            logger.info(f"=== –ó–∞–ø—É—Å–∫ AI Mentor Bot (–ø–æ–ø—ã—Ç–∫–∞ {self.restart_count + 1}) ===")
            
            # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            self.bot = Bot(token=config.BOT_TOKEN)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
            restart_msg = " (–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫)" if self.restart_count > 0 else ""
            for admin_id in config.SUPER_ADMINS:
                try:
                    await self.bot.send_message(
                        admin_id,
                        f"üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è{restart_msg}...\n"
                        f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
                        f"üîÑ –ü–æ–ø—ã—Ç–∫–∞: {self.restart_count + 1}"
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –±–æ—Ç–∞
            await setup_bot()
            
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)")
            self.should_restart = False
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}", exc_info=True)
            self.restart_count += 1
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ—à–∏–±–∫–µ
            if self.bot:
                for admin_id in config.SUPER_ADMINS:
                    try:
                        await self.bot.send_message(
                            admin_id,
                            f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞!\n"
                            f"üêõ –û—à–∏–±–∫–∞: {str(e)[:500]}\n"
                            f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
                            f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {self.restart_count}/{self.max_restarts}"
                        )
                    except Exception:
                        pass
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
            if self.restart_count >= self.max_restarts:
                logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ ({self.max_restarts}). –û—Å—Ç–∞–Ω–æ–≤–∫–∞.")
                self.should_restart = False
                
                # –§–∏–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
                if self.bot:
                    for admin_id in config.SUPER_ADMINS:
                        try:
                            await self.bot.send_message(
                                admin_id,
                                f"üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ {self.max_restarts} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫.\n"
                                f"–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ."
                            )
                        except Exception:
                            pass
            else:
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
                wait_time = min(60 * self.restart_count, 300)  # –£–≤–µ–ª–∏—á–∏–≤–∞—é—â–∞—è—Å—è –∑–∞–¥–µ—Ä–∂–∫–∞, max 5 –º–∏–Ω
                logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º...")
                await asyncio.sleep(wait_time)
        
        finally:
            if self.bot:
                await shutdown_bot(self.bot)
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏"""
        while self.should_restart:
            await self.start_bot()
            
            if self.should_restart and self.restart_count < self.max_restarts:
                logger.info("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É...")
                await asyncio.sleep(5)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        
        logger.info("=== –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã AI Mentor Bot ===")

def setup_signal_handlers(runner):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    def signal_handler(signum, frame):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
        runner.should_restart = False
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º event loop
        loop = asyncio.get_event_loop()
        if loop.is_running():
            loop.stop()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –ù–∞ Windows –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É Ctrl+Break
    if hasattr(signal, 'SIGBREAK'):
        signal.signal(signal.SIGBREAK, signal_handler)

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"""
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    env_path = Path('.env')
    if not env_path.exists():
        logger.error("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    required_vars = ['BOT_TOKEN', 'OPENAI_API_KEY']
    missing_vars = []
    
    for var in required_vars:
        value = os.getenv(var)
        if not value:
            missing_vars.append(var)
    
    if missing_vars:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–¥–º–∏–Ω–æ–≤
    if not config.ALL_ADMINS:
        logger.warning("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã! –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    else:
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –∞–¥–º–∏–Ω–æ–≤: {len(config.ALL_ADMINS)} (–∏–∑ –Ω–∏—Ö —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤: {len(config.SUPER_ADMINS)})")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    dirs = ['logs', 'prompts', 'prompts/templates']
    for dir_path in dirs:
        Path(dir_path).mkdir(parents=True, exist_ok=True)
    
    logger.info("‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É")
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω –∑–∞–ø—É—Å–∫–∞"""
    print("ü§ñ AI Mentor Bot - Production Runner")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not check_environment():
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º runner
    runner = BotRunner()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    setup_signal_handlers(runner)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        asyncio.run(runner.run())
    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
    except Exception as e:
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}", exc_info=True)
        sys.exit(1)

if __name__ == "__main__":
    main()