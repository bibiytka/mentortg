import re
import math
from typing import List, Dict, Tuple, Optional
from datetime import datetime

def format_user_progress(completed_tests: int, total_tests: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if total_tests == 0:
        return "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"
    
    percentage = (completed_tests / total_tests) * 100
    progress_bar = create_progress_bar(percentage)
    
    return f"{progress_bar} {completed_tests}/{total_tests} ({percentage:.1f}%)"

def create_progress_bar(percentage: float, length: int = 10) -> str:
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é –ø–æ–ª–æ—Å—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    filled = int(length * percentage / 100)
    bar = "‚ñà" * filled + "‚ñë" * (length - filled)
    return f"[{bar}]"

def truncate_text(text: str, max_length: int = 100, suffix: str = "...") -> str:
    """–û–±—Ä–µ–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã"""
    if len(text) <= max_length:
        return text
    return text[:max_length - len(suffix)] + suffix

def clean_text(text: str) -> str:
    """–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    if not text:
        return ""
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    text = re.sub(r'\s+', ' ', text.strip())
    
    # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    text = re.sub(r'<[^>]+>', '', text)
    
    return text

def validate_text_length(text: str, min_length: int = 1, max_length: int = 1000) -> Tuple[bool, str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞"""
    if not text or len(text.strip()) < min_length:
        return False, f"–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º {min_length} —Å–∏–º–≤–æ–ª–æ–≤"
    
    if len(text) > max_length:
        return False, f"–¢–µ–∫—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å {max_length} —Å–∏–º–≤–æ–ª–æ–≤"
    
    return True, ""

def format_datetime(dt: datetime, format_type: str = "full") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è"""
    if format_type == "full":
        return dt.strftime("%d.%m.%Y %H:%M:%S")
    elif format_type == "date":
        return dt.strftime("%d.%m.%Y")
    elif format_type == "time":
        return dt.strftime("%H:%M")
    elif format_type == "short":
        return dt.strftime("%d.%m %H:%M")
    else:
        return str(dt)

def calculate_pagination(total_items: int, items_per_page: int, current_page: int = 1) -> Dict:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    total_pages = math.ceil(total_items / items_per_page) if total_items > 0 else 1
    current_page = max(1, min(current_page, total_pages))
    
    offset = (current_page - 1) * items_per_page
    has_prev = current_page > 1
    has_next = current_page < total_pages
    
    return {
        "total_pages": total_pages,
        "current_page": current_page,
        "offset": offset,
        "has_prev": has_prev,
        "has_next": has_next,
        "items_per_page": items_per_page
    }

def extract_numbers(text: str) -> List[int]:
    """–ò–∑–≤–ª–µ—á—å –≤—Å–µ —á–∏—Å–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    return [int(match) for match in re.findall(r'\d+', text)]

def format_file_size(size_bytes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if size_bytes == 0:
        return "0 B"
    
    size_names = ["B", "KB", "MB", "GB", "TB"]
    i = int(math.floor(math.log(size_bytes, 1024)))
    p = math.pow(1024, i)
    s = round(size_bytes / p, 2)
    
    return f"{s} {size_names[i]}"

def create_username_display(username: Optional[str], full_name: str, user_id: int) -> str:
    """–°–æ–∑–¥–∞—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if username:
        return f"{full_name} (@{username})"
    return f"{full_name} (ID: {user_id})"

def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown"""
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    return text

def format_test_statistics(total_questions: int, correct_answers: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ—Å—Ç–∞"""
    if total_questions == 0:
        return "–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤"
    
    percentage = (correct_answers / total_questions) * 100
    
    if percentage >= 90:
        grade = "–û—Ç–ª–∏—á–Ω–æ! üèÜ"
    elif percentage >= 70:
        grade = "–•–æ—Ä–æ—à–æ! üëç"
    elif percentage >= 50:
        grade = "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ ‚ö°"
    else:
        grade = "–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è üìö"
    
    return f"{grade} {correct_answers}/{total_questions} ({percentage:.1f}%)"

def generate_test_report_summary(analysis_results: List[Dict]) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –æ—Ç—á–µ—Ç–∞ —Ç–µ—Å—Ç–∞"""
    if not analysis_results:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    
    total = len(analysis_results)
    correct = sum(1 for result in analysis_results if result.get("is_sufficient", False))
    
    percentage = (correct / total) * 100
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É
    if percentage >= 80:
        overall = "üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"
    elif percentage >= 60:
        overall = "üëç –•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!"
    elif percentage >= 40:
        overall = "‚ö° –ï—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è"
    else:
        overall = "üìö –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª"
    
    return f"{overall} –†–µ–∑—É–ª—å—Ç–∞—Ç: {correct}/{total} ({percentage:.1f}%)"

def sanitize_filename(filename: str) -> str:
    """–û—á–∏—Å—Ç–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    filename = re.sub(r'[<>:"/\\|?*]', '_', filename)
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ç–æ—á–∫–∏ –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ
    filename = filename.strip(' .')
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if len(filename) > 100:
        name, ext = filename.rsplit('.', 1) if '.' in filename else (filename, '')
        filename = name[:95] + ('.' + ext if ext else '')
    
    return filename or "unnamed_file"

def parse_callback_data(callback_data: str) -> Dict[str, str]:
    """–ü–∞—Ä—Å–∏—Ç—å callback_data –∏ –∏–∑–≤–ª–µ—á—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""
    parts = callback_data.split('_')
    
    if len(parts) < 2:
        return {"action": callback_data}
    
    result = {"action": parts[0]}
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ callback'–æ–≤
    if parts[0] in ["view", "start", "edit", "nav"]:
        if len(parts) >= 3:
            result["object_type"] = parts[1]
            result["object_id"] = parts[2]
    elif parts[0] == "stats":
        if len(parts) >= 3:
            result["page"] = parts[2]
    elif parts[0] == "feedback":
        if len(parts) >= 3:
            result["type"] = parts[1]
            result["attempt_id"] = parts[2]
    
    return result

def create_progress_message(current: int, total: int, action: str = "–û–±—Ä–∞–±–æ—Ç–∫–∞") -> str:
    """–°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
    percentage = (current / total) * 100 if total > 0 else 0
    progress_bar = create_progress_bar(percentage, 15)
    
    return f"{action}... {progress_bar} {current}/{total} ({percentage:.1f}%)"