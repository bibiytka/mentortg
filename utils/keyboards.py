from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Dict

# === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===

def get_main_menu_keyboard(is_admin: bool = False) -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å inline –∫–Ω–æ–ø–∫–∞–º–∏"""
    buttons = [
        [InlineKeyboardButton(text="üìö –¢–µ–æ—Ä–∏—è", callback_data="menu_theory")],
        [InlineKeyboardButton(text="üìù –¢–µ—Å—Ç—ã", callback_data="menu_tests")]
    ]
    
    if is_admin:
        buttons.append([InlineKeyboardButton(text="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="menu_admin")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# === –¢–ï–û–†–ò–Ø ===

def get_theory_menu_keyboard(blocks: List[Dict]) -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –±–ª–æ–∫–æ–≤ —Ç–µ–æ—Ä–∏–∏"""
    buttons = []
    
    for block in blocks:
        buttons.append([
            InlineKeyboardButton(
                text=block["title"],
                callback_data=f"theory_view_{block['id']}"
            )
        ])
    
    buttons.append([InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_theory_view_keyboard(block_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–æ—Ä–∏–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéØ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data=f"test_start_{block_id}")],
        [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –±–ª–æ–∫–æ–≤", callback_data="menu_theory")]
    ])

# === –¢–ï–°–¢–´ ===

def get_tests_menu_keyboard(blocks: List[Dict], user_progress: int = 0) -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤"""
    buttons = []
    
    for block in blocks:
        if block["block_order"] <= user_progress + 1:
            # –î–æ—Å—Ç—É–ø–Ω—ã–π —Ç–µ—Å—Ç
            text = f"‚úÖ {block['title']}" if block["block_order"] <= user_progress else block["title"]
            buttons.append([
                InlineKeyboardButton(
                    text=text,
                    callback_data=f"test_start_{block['id']}"
                )
            ])
        else:
            # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç
            buttons.append([
                InlineKeyboardButton(
                    text=f"üîí {block['title']}",
                    callback_data=f"test_locked_{block['id']}"
                )
            ])
    
    buttons.append([InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_test_feedback_keyboard(attempt_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üëç –ü–æ–ª–µ–∑–Ω–æ", callback_data=f"feedback_positive_{attempt_id}"),
            InlineKeyboardButton(text="üëé –ë–µ—Å–ø–æ–ª–µ–∑–Ω–æ", callback_data=f"feedback_negative_{attempt_id}")
        ],
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")]
    ])

def get_active_test_keyboard(active_test: Dict) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Ç–µ—Å—Ç–æ–º"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç '{active_test['block_title']}'", 
            callback_data="test_continue"
        )],
        [InlineKeyboardButton(
            text="üóëÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π", 
            callback_data="test_cancel_and_new"
        )],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç–∞–º", callback_data="menu_tests")]
    ])

def get_test_in_progress_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç", callback_data="test_cancel_current")]
    ])

# === –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ===

def get_admin_menu_keyboard(is_super_admin: bool = False, maintenance_mode: bool = False) -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    buttons = [
        [InlineKeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º", callback_data="admin_content")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üìâ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ò–ò", callback_data="admin_ai_analytics")]
    ]
    
    if is_super_admin:
        maintenance_text = "üõ†Ô∏è –†–µ–∂–∏–º: –í–ö–õ" if maintenance_mode else "üõ†Ô∏è –†–µ–∂–∏–º: –í–´–ö–õ"
        buttons.append([
            InlineKeyboardButton(text=maintenance_text, callback_data="admin_maintenance")
        ])
    
    buttons.append([InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_admin_content_keyboard(block_id: int, current: int, total: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
    buttons = [
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"content_edit_text_{block_id}")],
        [InlineKeyboardButton(text="üé• –ò–∑–º–µ–Ω–∏—Ç—å –≤–∏–¥–µ–æ", callback_data=f"content_edit_video_{block_id}")],
        [InlineKeyboardButton(text="üìÑ –ò–∑–º–µ–Ω–∏—Ç—å PDF", callback_data=f"content_edit_pdf_{block_id}")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –±–ª–æ–∫", callback_data=f"content_delete_{block_id}")]
    ]
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    if current > 1:
        prev_id = current - 1
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"content_nav_{prev_id}"))
    
    nav_buttons.append(InlineKeyboardButton(text=f"{current}/{total}", callback_data="content_current"))
    
    if current < total:
        next_id = current + 1
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"content_nav_{next_id}"))
    
    if len(nav_buttons) > 1:
        buttons.append(nav_buttons)
    
    buttons.append([InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="menu_admin")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_admin_stats_keyboard(current_page: int, total_pages: int, has_prev: bool, has_next: bool) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    buttons = []
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    nav_buttons = []
    if has_prev:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"stats_page_{current_page-1}"))
    
    if total_pages > 1:
        nav_buttons.append(InlineKeyboardButton(text=f"{current_page}/{total_pages}", callback_data="stats_current"))
    
    if has_next:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"stats_page_{current_page+1}"))
    
    if nav_buttons:
        buttons.append(nav_buttons)
    
    buttons.append([InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="menu_admin")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# === –ê–ù–ê–õ–ò–¢–ò–ö–ê –ò–ò ===

def get_ai_analytics_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ò–ò"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω–æ –ø–æ –±–ª–æ–∫–∞–º", callback_data="ai_analytics_blocks")],
        [
            InlineKeyboardButton(text="üëç –õ—É—á—à–∏–µ", callback_data="ai_analytics_best"),
            InlineKeyboardButton(text="üëé –•—É–¥—à–∏–µ", callback_data="ai_analytics_worst")
        ],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_ai_analytics")],
        [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="menu_admin")]
    ])

def get_ai_blocks_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –±–ª–æ–∫–∞–º"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ö –∞–Ω–∞–ª–∏—Ç–∏–∫–µ –ò–ò", callback_data="admin_ai_analytics")]
    ])

# === –°–ò–°–¢–ï–ú–ù–´–ï ===

def get_back_keyboard(destination: str) -> InlineKeyboardMarkup:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    destinations = {
        "main": ("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu_main"),
        "theory": ("üîô –ö —Ç–µ–æ—Ä–∏–∏", "menu_theory"),
        "tests": ("üîô –ö —Ç–µ—Å—Ç–∞–º", "menu_tests"),
        "admin": ("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", "menu_admin"),
        "stats": ("üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", "admin_stats"),
        "analytics": ("üîô –ö –∞–Ω–∞–ª–∏—Ç–∏–∫–µ", "admin_ai_analytics")
    }
    
    text, callback = destinations.get(destination, ("üîô –ù–∞–∑–∞–¥", "menu_main"))
    
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=text, callback_data=callback)]
    ])

def get_confirm_keyboard(action: str, item_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_{action}_{item_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_content")
        ]
    ])